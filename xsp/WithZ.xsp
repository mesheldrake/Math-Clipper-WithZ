

%module{Math::Clipper::WithZ};
%package{Math::Clipper::WithZ};

%{
#include <myinit.h>
#include <iostream>

PROTOTYPES: DISABLE

IV
_constant()
  ALIAS:
    CT_INTERSECTION = ctIntersection
    CT_UNION = ctUnion
    CT_DIFFERENCE = ctDifference
    CT_XOR = ctXor
    PT_SUBJECT = ptSubject
    PT_CLIP = ptClip
    PFT_EVENODD = pftEvenOdd
    PFT_NONZERO = pftNonZero
    PFT_POSITIVE = pftPositive
    PFT_NEGATIVE = pftNegative
    JT_MITER = jtMiter
    JT_ROUND = jtRound
    JT_SQUARE = jtSquare
    ET_CLOSED = etClosed
    ET_BUTT = etButt
    ET_SQUARE = etSquare
    ET_ROUND = etRound
  CODE:
    RETVAL = ix;
  OUTPUT: RETVAL

%}

%name{Math::Clipper::WithZ}
class Clipper {
  Clipper();
  ~Clipper();

%{
ClipperLib::Polygons*
execute(THIS, clipType, subjFillType = pftEvenOdd, clipFillType = pftEvenOdd, withZFill = 0)
    Clipper* THIS
    ClipType clipType
    PolyFillType subjFillType
    PolyFillType clipFillType
    unsigned int withZFill
  CODE:
    RETVAL = new ClipperLib::Polygons();
    if (withZFill) {THIS->ZFillFunction(&zfill_both_uint32s);std::cout << "WITH Z FILL a\n";}
    THIS->ZFillFunction(NULL);
    THIS->Execute(clipType, *RETVAL, subjFillType, clipFillType);
    if (withZFill) {zfill_both_uint32s_fix_pairs_polygons(*RETVAL, clipType);std::cout << "WITH Z FILL b\n";}
  OUTPUT:
    RETVAL

ExPolygons*
ex_execute(THIS, clipType, subjFillType = pftEvenOdd, clipFillType = pftEvenOdd, withZFill = 0)
    Clipper* THIS
    ClipType clipType
    PolyFillType subjFillType
    PolyFillType clipFillType
    unsigned int withZFill
  CODE:
    PolyTree* polytree = new ClipperLib::PolyTree();
    if (withZFill) {THIS->ZFillFunction(&zfill_both_uint32s);}
    THIS->Execute(clipType, *polytree, subjFillType, clipFillType);
    if (withZFill) {zfill_both_uint32s_fix_pairs_polytree(*polytree, clipType);}
    RETVAL = new ExPolygons();
    PolyTreeToExPolygons(*polytree, *RETVAL);
    delete polytree;
  OUTPUT:
    RETVAL

ClipperLib::PolyTree*
pt_execute(THIS, clipType, subjFillType = pftEvenOdd, clipFillType = pftEvenOdd, withZFill = 0)
    Clipper* THIS
    ClipType clipType
    PolyFillType subjFillType
    PolyFillType clipFillType
    unsigned int withZFill
  CODE:
    RETVAL = new ClipperLib::PolyTree();
    if (withZFill) {THIS->ZFillFunction(&zfill_both_uint32s);}
    THIS->Execute(clipType, *RETVAL, subjFillType, clipFillType);
    if (withZFill) {zfill_both_uint32s_fix_pairs_polytree(*RETVAL, clipType);}
  OUTPUT:
    RETVAL

%}

// No longer in v4.X
//  %name{get_force_orientation}
//    bool ForceOrientation();
//  %name{set_force_orientation}
//    void ForceOrientation(bool value);

// We don't expose this since we save the PolyType stuff entirely that way!
//  %name{add_polygon}
//    void AddPolygon(const Polygon &pg, PolyType polyType);

%{

void
add_subject_polygon(self, poly)
    Clipper* self
    ClipperLib::Polygon* poly
  PPCODE:
    self->AddPolygon(*poly, ptSubject);
    delete poly;

void
add_clip_polygon(self, poly)
    Clipper* self
    ClipperLib::Polygon* poly
  PPCODE:
    self->AddPolygon(*poly, ptClip);
    delete poly;

void
add_subject_polygons(self, polys)
    Clipper* self
    ClipperLib::Polygons* polys
  PPCODE:
    self->AddPolygons(*polys, ptSubject);
    delete polys;

void
add_clip_polygons(self, polys)
    Clipper* self
    ClipperLib::Polygons* polys
  PPCODE:
    self->AddPolygons(*polys, ptClip);
    delete polys;

double
orientation(polygon)
    ClipperLib::Polygon* polygon
  CODE:
    RETVAL = ClipperLib::Orientation(*polygon);
    delete polygon;
  OUTPUT: RETVAL

double
area(polygon)
    ClipperLib::Polygon* polygon
  CODE:
    RETVAL = ClipperLib::Area(*polygon);
    delete polygon;
  OUTPUT: RETVAL

ClipperLib::Polygons*
_offset(polygons, delta, jointype, MiterLimit)
    ClipperLib::Polygons* polygons
    const float delta
    JoinType jointype
    const double MiterLimit
  CODE:
    RETVAL = new ClipperLib::Polygons();
    ClipperLib::OffsetPolygons(*polygons, *RETVAL, delta, jointype, MiterLimit);
    delete polygons;
  OUTPUT:
    RETVAL

ClipperLib::Polygons*
int_offset(polygons, delta, scale, jointype, MiterLimit)
    ClipperLib::Polygons* polygons
    const float delta
    const double scale
    JoinType jointype
    const double MiterLimit
  CODE:
    RETVAL = _int_offset(polygons, delta, scale, jointype, MiterLimit);
    delete polygons;
  OUTPUT:
    RETVAL

ClipperLib::Polygons*
int_offset2(polygons, delta1, delta2, scale, jointype, MiterLimit)
    ClipperLib::Polygons* polygons
    const float delta1
    const float delta2
    const double scale
    JoinType jointype
    const double MiterLimit
  CODE:
    // scale
    _scale_polygons(polygons, scale);
    
    // perform first offset
    ClipperLib::Polygons* offset1 = new ClipperLib::Polygons();
    ClipperLib::OffsetPolygons(*polygons, *offset1, (delta1*scale), jointype, MiterLimit);
    
    // perform second offset
    RETVAL = new ClipperLib::Polygons();
    ClipperLib::OffsetPolygons(*offset1, *RETVAL, (delta2*scale), jointype, MiterLimit);
    
    // unscale
    _scale_polygons(RETVAL, 1/scale);
    
    // cleanup
    delete offset1;
    delete polygons;
  OUTPUT:
    RETVAL

ExPolygons*
ex_int_offset(polygons, delta, scale, jointype, MiterLimit)
    ClipperLib::Polygons* polygons
    const float delta
    const double scale
    JoinType jointype
    const double MiterLimit
  CODE:
    Clipper clpr;
    clpr.Clear();
    ClipperLib::Polygons* offset = _int_offset(polygons, delta, scale, jointype, MiterLimit);
    clpr.AddPolygons(*offset, ptSubject);
    PolyTree* polytree = new ClipperLib::PolyTree();
    clpr.Execute(ctUnion, *polytree, pftEvenOdd, pftEvenOdd);  // offset results work with both EvenOdd and NonZero
    
    RETVAL = new ExPolygons();
    PolyTreeToExPolygons(*polytree, *RETVAL);
    
    // cleanup
    delete polygons;
    delete offset;
    delete polytree;
  OUTPUT:
    RETVAL

ExPolygons*
ex_int_offset2(polygons, delta1, delta2, scale, jointype, MiterLimit)
    ClipperLib::Polygons* polygons
    const float delta1
    const float delta2
    const double scale
    JoinType jointype
    const double MiterLimit
  CODE:
    // scale
    _scale_polygons(polygons, scale);
    
    // perform first offset
    ClipperLib::Polygons* offset1 = new ClipperLib::Polygons();
    ClipperLib::OffsetPolygons(*polygons, *offset1, (delta1*scale), jointype, MiterLimit);
    
    // perform second offset
    ClipperLib::Polygons* offset2 = new ClipperLib::Polygons();
    ClipperLib::OffsetPolygons(*offset1, *offset2, (delta2*scale), jointype, MiterLimit);
    
    // unscale
    _scale_polygons(offset2, 1/scale);
    
    // perform UNION
    Clipper clpr;
    clpr.Clear();
    clpr.AddPolygons(*offset2, ptSubject);
    PolyTree* polytree = new ClipperLib::PolyTree();
    clpr.Execute(ctUnion, *polytree, pftEvenOdd, pftEvenOdd);  // offset results work with both EvenOdd and NonZero
    
    // convert result to ExPolygons
    RETVAL = new ExPolygons();
    PolyTreeToExPolygons(*polytree, *RETVAL);
    
    // cleanup
    delete polygons;
    delete offset1;
    delete offset2;
    delete polytree;
  OUTPUT:
    RETVAL

ClipperLib::Polygons*
polylines_offset(polylines, delta, jointype, endtype, limit)
    ClipperLib::Polygons* polylines
    const float delta
    JoinType jointype
    EndType endtype
    const double limit
  CODE:
    RETVAL = new ClipperLib::Polygons();
    ClipperLib::OffsetPolyLines(*polylines, *RETVAL, delta, jointype, endtype, limit);
    delete polylines;
  OUTPUT:
    RETVAL

ClipperLib::Polygons*
simplify_polygon(polygon, fillType)
    ClipperLib::Polygon* polygon
    PolyFillType fillType
  CODE:
    RETVAL = new ClipperLib::Polygons();
    ClipperLib::SimplifyPolygon(*polygon, *RETVAL, fillType);
    delete polygon;
  OUTPUT:
    RETVAL

ClipperLib::Polygons*
simplify_polygons(polygons, fillType)
    ClipperLib::Polygons* polygons
    PolyFillType fillType
  CODE:
    RETVAL = new ClipperLib::Polygons();
    ClipperLib::SimplifyPolygons(*polygons, *RETVAL, fillType);
    delete polygons;
  OUTPUT:
    RETVAL
%}

  %name{clear}
    void Clear();

};



